// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TokenDeflacionario is ERC20, Ownable {
    uint256 public constant burnRate = 1; // Taxa de queima fixa de 1%

    constructor() ERC20("TokenDeflacionario", "TDF") {
        _mint(msg.sender, 10000000 * 10 ** decimals()); // Criação inicial de 10 milhões de tokens
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal override {
        uint256 burnAmount = (amount * burnRate) / 100; // Calcula a quantidade a ser queimada (1%)
        uint256 amountAfterBurn = amount - burnAmount; // Subtrai a queima do total

        _burn(sender, burnAmount); // Queima a quantidade configurada
        super._transfer(sender, recipient, amountAfterBurn); // Transfere o restante para o destinatário
    }

    function decimals() public view virtual override returns (uint8) {
        return 18; // Define o número de casas decimais (padrão é 18)
    }
}
